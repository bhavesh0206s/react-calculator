{"version":3,"sources":["App.js","Components/Buttons.js","Components/Result.js","serviceWorker.js","index.js"],"names":["App","props","handleClick","event","target","name","setState","expression","answer","showResult","enteredValues","state","length","error","eval","className","this","React","Component","Buttons","onClick","e","Result","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9300d867.chunk.js","sourcesContent":["import React from 'react';\nimport Buttons from \"./Components/Buttons\";\nimport Result from \"./Components/Result\"\nimport './App.css';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      expression: \"\",\n      answer: \"\"\n    }\n  }\n  handleClick=(event)=>{\n    try{\n      if(event.target.name === \"AC\"){\n        this.setState({expression: \"\"})\n        this.setState({answer: \"\"})\n      }\n      else if(event.target.name === \"=\"){\n        this.showResult()\n      }\n      else{\n        let enteredValues = this.state.expression+event.target.name;\n        if(enteredValues.length <= 25){\n          this.setState({expression: enteredValues})\n        }\n      }\n    }\n    catch(error){\n      this.setState({expression: \"ERROR\"})\n    }\n  }\n  showResult = ()=>{\n    let expression = this.state.expression;\n    this.setState({answer: eval(expression)})\n    this.setState({expression: \"\"})\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <h1>Calulator You Have Been Waiting For</h1>\n        <Result expression={this.state.expression} answer={this.state.answer}/>\n        <Buttons handleClick={this.handleClick}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport \"./button.css\"\r\n\r\nclass Buttons extends React.Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <div>\r\n            <button name=\"(\" onClick={(e)=>{this.props.handleClick(e)}}>(</button>\r\n            <button name=\")\"  onClick={(e)=>{this.props.handleClick(e)}}>)</button>\r\n            <button name=\"%\"  onClick={(e)=>{this.props.handleClick(e)}}>%</button>\r\n            <button name=\"AC\"  onClick={(e)=>{this.props.handleClick(e)}}>AC</button>\r\n        </div>\r\n        <div>\r\n            <button name=\"7\"  onClick={(e)=>{this.props.handleClick(e)}}>7</button>\r\n            <button name=\"8\"  onClick={(e)=>{this.props.handleClick(e)}}>8</button>\r\n            <button name=\"9\"  onClick={(e)=>{this.props.handleClick(e)}}>9</button>\r\n            <button name=\"/\"  onClick={(e)=>{this.props.handleClick(e)}}>/</button>\r\n        </div>\r\n        <div>\r\n            <button name=\"4\"  onClick={(e)=>{this.props.handleClick(e)}}>4</button>\r\n            <button name=\"5\"  onClick={(e)=>{this.props.handleClick(e)}}>5</button>\r\n            <button name=\"6\"  onClick={(e)=>{this.props.handleClick(e)}}>6</button>\r\n            <button name=\"*\"  onClick={(e)=>{this.props.handleClick(e)}}>*</button>\r\n        </div>\r\n        <div>\r\n            <button name=\"1\"  onClick={(e)=>{this.props.handleClick(e)}}>1</button>\r\n            <button name=\"2\"  onClick={(e)=>{this.props.handleClick(e)}}>2</button>\r\n            <button name=\"3\"  onClick={(e)=>{this.props.handleClick(e)}}>3</button>\r\n            <button name=\"-\"  onClick={(e)=>{this.props.handleClick(e)}}>-</button>\r\n        </div>\r\n        <div>\r\n            <button name=\"0\"  onClick={(e)=>{this.props.handleClick(e)}}>0</button>\r\n            <button name=\".\"  onClick={(e)=>{this.props.handleClick(e)}}>.</button>\r\n            <button name=\"=\"  onClick={(e)=>{this.props.handleClick(e)}}>=</button>\r\n            <button name=\"+\"  onClick={(e)=>{this.props.handleClick(e)}}>+</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;\r\n","import React from \"react\"\r\nimport \"./box.css\"\r\n\r\nconst Result = ({expression, answer})=>{\r\n    return(\r\n        <div className=\"box\">\r\n            <div className=\"text\">\r\n                {expression}\r\n                {answer}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Result;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}